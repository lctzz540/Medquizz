{"ast":null,"code":"var _jsxFileName = \"/Users/thangle/Documents/test/quiz-app/final/src/components/Quizz.jsx\";\nimport React, { useState } from 'react';\nimport Question from '../data/questions.js';\n\nconst Quizz = props => {\n  const questions = Question().sort(() => Math.random() - 0.5).slice(0, props.numberOfQuestions);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [wrongAnswer, setWrongAnswer] = useState([]);\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    } else {\n      setWrongAnswer(wrongAnswer.concat([questions[currentQuestion].questionText, questions[currentQuestion].answerOptions.find(element => element.isCorrect === true)]));\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n      console.log('oke');\n      console.log(wrongAnswer);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quizz\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 6\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 8\n    }\n  }, answerOption.answerText)))));\n};\n\nexport default Quizz;","map":{"version":3,"sources":["/Users/thangle/Documents/test/quiz-app/final/src/components/Quizz.jsx"],"names":["React","useState","Question","Quizz","props","questions","sort","Math","random","slice","numberOfQuestions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","wrongAnswer","setWrongAnswer","handleAnswerOptionClick","isCorrect","concat","questionText","answerOptions","find","element","nextQuestion","length","console","log","map","answerOption","answerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAsB,sBAAtB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAMC,SAAS,GAAGH,QAAQ,GAAGI,IAAX,CAAgB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtC,EAA2CC,KAA3C,CAAiD,CAAjD,EAAmDL,KAAK,CAACM,iBAAzD,CAAlB;AACD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAlC;AACC,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;;AAED,QAAMkB,uBAAuB,GAAIC,SAAD,IAAe;AAC9C,QAAIA,SAAJ,EAAe;AACdJ,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,KAFD,MAEM;AACFG,MAAAA,cAAc,CAACD,WAAW,CAACI,MAAZ,CAAmB,CAAChB,SAAS,CAACM,eAAD,CAAT,CAA2BW,YAA5B,EAChCjB,SAAS,CAACM,eAAD,CAAT,CAA2BY,aAA3B,CAAyCC,IAAzC,CAA+CC,OAAD,IAAaA,OAAO,CAACL,SAAR,KAAsB,IAAjF,CADgC,CAAnB,CAAD,CAAd;AAID;;AAEH,UAAMM,YAAY,GAAGf,eAAe,GAAG,CAAvC;;AACA,QAAIe,YAAY,GAAGrB,SAAS,CAACsB,MAA7B,EAAqC;AACpCf,MAAAA,kBAAkB,CAACc,YAAD,CAAlB;AACA,KAFD,MAEO;AACNZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACGc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;AACH;AACD,GAlBD;;AAmBC,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,SAAS,gBACZ;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACaE,KADb,cAC4BV,SAAS,CAACsB,MADtC,CADY,gBAKZ,uDACC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBhB,eAAe,GAAG,CAAlC,CADD,OAC8CN,SAAS,CAACsB,MADxD,CADD,eAIC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCtB,SAAS,CAACM,eAAD,CAAT,CAA2BW,YAA3D,CAJD,CADD,eAOC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEjB,SAAS,CAACM,eAAD,CAAT,CAA2BY,aAA3B,CAAyCO,GAAzC,CAA8CC,YAAD,iBAC7C;AAAQ,IAAA,OAAO,EAAE,MAAMZ,uBAAuB,CAACY,YAAY,CAACX,SAAd,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyEW,YAAY,CAACC,UAAtF,CADA,CADF,CAPD,CANA,CADF;AAwBD,CAlDD;;AAoDA,eAAe7B,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport Question from  '../data/questions.js'\n\nconst Quizz = (props) => {\n  const questions = Question().sort(() => Math.random() - 0.5).slice(0,props.numberOfQuestions)\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n  const [wrongAnswer, setWrongAnswer] = useState([])\n\n\tconst handleAnswerOptionClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}else {\n      setWrongAnswer(wrongAnswer.concat([questions[currentQuestion].questionText,\n        questions[currentQuestion].answerOptions.find((element) => element.isCorrect === true)]\n      )\n      )\n    }\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n      console.log('oke')\n      console.log(wrongAnswer)\n\t\t}\n\t};\n  return (\n    <div className='quizz'>\n      {showScore ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYou scored {score} out of {questions.length}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\n    </div>\n  )\n}\n\nexport default Quizz\n"]},"metadata":{},"sourceType":"module"}